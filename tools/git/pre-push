#!/bin/bash

# SSHBian Pre-push Hook
# Prevents pushing to main branch if shell scripts or Dockerfiles fail validation

set -e

# Read the input from git
while IFS=' ' read -r local_ref local_sha remote_ref remote_sha; do
    # Check if we're pushing to main branch
    if [[ $remote_ref == *"refs/heads/main"* ]]; then
        echo "Pushing to main branch - running comprehensive validation..."
        
        # Track overall success
        overall_success=true
        
        # Check if shellcheck is installed
        if ! command -v shellcheck >/dev/null 2>&1; then
            echo "ERROR: ShellCheck is not installed."
            echo "Please install ShellCheck before pushing to main:"
            echo "  macOS: brew install shellcheck"
            echo "  Linux: apt-get install shellcheck"
            exit 1
        fi
        
        # Check if hadolint is installed
        if ! command -v hadolint >/dev/null 2>&1; then
            echo "WARNING: Hadolint is not installed. Dockerfile validation will be skipped."
            echo "To install Hadolint:"
            echo "  macOS: brew install hadolint"
            echo "  Linux: Download from https://github.com/hadolint/hadolint/releases"
        fi
        
        # Find all shell scripts in the repository
        shell_scripts=$(find . -name "*.sh" -type f | grep -v ".git/" || true)
        
        # Find all Dockerfiles in the repository
        dockerfiles=$(find . -name "Dockerfile*" -o -name "dockerfile*" -o -name "*.dockerfile" -o -name "*.docker" | grep -v ".git/" || true)
        
        # Validate shell scripts
        if [ -n "$shell_scripts" ]; then
            echo "Validating shell scripts..."
            
            # Track failures
            failed_scripts=()
            
            # Check each shell script
            for script in $shell_scripts; do
                echo "Checking: $script"
                
                if ! shellcheck "$script"; then
                    failed_scripts+=("$script")
                    echo "FAILED: $script"
                else
                    echo "PASSED: $script"
                fi
            done
            
            # Report shell script results
            if [ ${#failed_scripts[@]} -ne 0 ]; then
                echo ""
                echo "ERROR: The following shell scripts failed ShellCheck validation:"
                for script in "${failed_scripts[@]}"; do
                    echo "  - $script"
                done
                overall_success=false
            else
                echo "All shell scripts passed validation."
            fi
        fi
        
        # Validate Dockerfiles
        if [ -n "$dockerfiles" ] && command -v hadolint >/dev/null 2>&1; then
            echo "Validating Dockerfiles..."
            
            # Track failures
            failed_dockerfiles=()
            
            # Check each Dockerfile
            for dockerfile in $dockerfiles; do
                echo "Checking: $dockerfile"
                
                if ! hadolint "$dockerfile"; then
                    failed_dockerfiles+=("$dockerfile")
                    echo "FAILED: $dockerfile"
                else
                    echo "PASSED: $dockerfile"
                fi
            done
            
            # Report Dockerfile results
            if [ ${#failed_dockerfiles[@]} -ne 0 ]; then
                echo ""
                echo "ERROR: The following Dockerfiles failed Hadolint validation:"
                for dockerfile in "${failed_dockerfiles[@]}"; do
                    echo "  - $dockerfile"
                done
                overall_success=false
            else
                echo "All Dockerfiles passed validation."
            fi
        elif [ -n "$dockerfiles" ]; then
            echo "Skipping Dockerfile validation (Hadolint not installed)."
        fi
        
        # Final result for main branch push
        if [ "$overall_success" = true ]; then
            echo "All validation checks passed for main branch."
        else
            echo ""
            echo "ERROR: Cannot push to main branch due to validation failures."
            echo ""
            echo "Please fix all validation errors before pushing to main."
            echo "For detailed error information:"
            echo "  shellcheck <script>    # For shell scripts"
            echo "  hadolint <dockerfile>  # For Dockerfiles"
            echo ""
            echo "To push to a feature branch instead:"
            echo "  git push origin HEAD:feature-branch-name"
            exit 1
        fi
    else
        echo "Pushing to non-main branch: $(basename "$remote_ref")"
    fi
done

exit 0