#!/bin/bash

# SSHBian Pre-commit Hook
# Validates shell scripts with ShellCheck and Dockerfiles with Hadolint before allowing commits

set -e

echo "Running pre-commit checks..."

# Track overall success
overall_success=true

# Check if commit is signed
if ! git log --format="%G?" -1 HEAD 2>/dev/null | grep -q '^[GU]$' && ! git rev-parse --verify HEAD >/dev/null 2>&1; then
    # This is the first commit or we can't check the previous commit
    # Check if the current commit will be signed by looking at git config
    if [ "$(git config --get commit.gpgsign)" != "true" ] && [ -z "$GIT_CONFIG_GLOBAL" ]; then
        echo "ERROR: Commits must be signed."
        echo "To enable commit signing:"
        echo "  git config --global commit.gpgsign true"
        echo "  git config --global user.signingkey <your-key-id>"
        echo ""
        echo "Or sign this commit manually:"
        echo "  git commit -S"
        echo ""
        echo "To setup GPG signing, see: https://docs.github.com/en/authentication/managing-commit-signature-verification"
        overall_success=false
    fi
fi

# Check if shellcheck is installed
if ! command -v shellcheck >/dev/null 2>&1; then
    echo "ERROR: ShellCheck is not installed."
    echo "Please install ShellCheck:"
    echo "  macOS: brew install shellcheck"
    echo "  Linux: apt-get install shellcheck"
    echo "  Other: https://github.com/koalaman/shellcheck#installing"
    exit 1
fi

# Check if hadolint is installed
if ! command -v hadolint >/dev/null 2>&1; then
    echo "WARNING: Hadolint is not installed. Dockerfile validation will be skipped."
    echo "To install Hadolint:"
    echo "  macOS: brew install hadolint"
    echo "  Linux: Download from https://github.com/hadolint/hadolint/releases"
    echo "  Docker: Use hadolint/hadolint container"
fi

# Check if vale is installed
if ! command -v vale >/dev/null 2>&1; then
    echo "WARNING: Vale is not installed. Markdown validation will be skipped."
    echo "To install Vale:"
    echo "  macOS: brew install vale"
    echo "  Linux: Download from https://github.com/errata-ai/vale/releases"
    echo "  Go: go install github.com/errata-ai/vale/v3/cmd/vale@latest"
fi

# Find all shell scripts being committed
shell_scripts=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(sh|bash)$' || true)

# Find all Dockerfiles being committed
dockerfiles=$(git diff --cached --name-only --diff-filter=ACM | grep -E '(Dockerfile|dockerfile|\.(docker|dockerfile)$)' || true)

# Find all Markdown files being committed
markdown_files=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(md|markdown)$' || true)

# Check shell scripts
if [ -n "$shell_scripts" ]; then
    echo "Checking shell scripts with ShellCheck..."
    
    # Track if any scripts fail
    failed_scripts=()
    
    # Check each shell script
    for script in $shell_scripts; do
        if [ -f "$script" ]; then
            echo "Checking: $script"
            
            # Run ShellCheck on the script
            if ! shellcheck "$script"; then
                failed_scripts+=("$script")
                echo "FAILED: $script"
            else
                echo "PASSED: $script"
            fi
        fi
    done
    
    # Report shell script results
    if [ ${#failed_scripts[@]} -ne 0 ]; then
        echo ""
        echo "ERROR: The following shell scripts failed ShellCheck validation:"
        for script in "${failed_scripts[@]}"; do
            echo "  - $script"
        done
        overall_success=false
    else
        echo "All shell scripts passed ShellCheck validation."
    fi
else
    echo "No shell scripts to check."
fi

# Check Dockerfiles
if [ -n "$dockerfiles" ] && command -v hadolint >/dev/null 2>&1; then
    echo "Checking Dockerfiles with Hadolint..."
    
    # Track if any Dockerfiles fail
    failed_dockerfiles=()
    
    # Check each Dockerfile
    for dockerfile in $dockerfiles; do
        if [ -f "$dockerfile" ]; then
            echo "Checking: $dockerfile"
            
            # Run Hadolint on the Dockerfile
            if ! hadolint "$dockerfile"; then
                failed_dockerfiles+=("$dockerfile")
                echo "FAILED: $dockerfile"
            else
                echo "PASSED: $dockerfile"
            fi
        fi
    done
    
    # Report Dockerfile results
    if [ ${#failed_dockerfiles[@]} -ne 0 ]; then
        echo ""
        echo "ERROR: The following Dockerfiles failed Hadolint validation:"
        for dockerfile in "${failed_dockerfiles[@]}"; do
            echo "  - $dockerfile"
        done
        overall_success=false
    else
        echo "All Dockerfiles passed Hadolint validation."
    fi
elif [ -n "$dockerfiles" ]; then
    echo "Skipping Dockerfile validation (Hadolint not installed)."
fi

# Check Markdown files
if [ -n "$markdown_files" ] && command -v vale >/dev/null 2>&1; then
    echo "Checking Markdown files with Vale..."
    
    # Track if any Markdown files fail
    failed_markdown=()
    
    # Check each Markdown file
    for mdfile in $markdown_files; do
        if [ -f "$mdfile" ]; then
            echo "Checking: $mdfile"
            
            # Run Vale on the Markdown file
            if ! vale "$mdfile"; then
                failed_markdown+=("$mdfile")
                echo "FAILED: $mdfile"
            else
                echo "PASSED: $mdfile"
            fi
        fi
    done
    
    # Report Markdown results
    if [ ${#failed_markdown[@]} -ne 0 ]; then
        echo ""
        echo "ERROR: The following Markdown files failed Vale validation:"
        for mdfile in "${failed_markdown[@]}"; do
            echo "  - $mdfile"
        done
        overall_success=false
    else
        echo "All Markdown files passed Vale validation."
    fi
elif [ -n "$markdown_files" ]; then
    echo "Skipping Markdown validation (Vale not installed)."
fi

# Final result
if [ "$overall_success" = true ]; then
    echo "All pre-commit checks passed."
    exit 0
else
    echo ""
    echo "Pre-commit validation failed. Please fix the issues above."
    echo ""
    echo "For detailed error information:"
    echo "  shellcheck <script>    # For shell scripts"
    echo "  hadolint <dockerfile>  # For Dockerfiles"
    echo "  vale <markdown>        # For Markdown files"
    echo ""
    echo "To bypass this check (NOT RECOMMENDED), use:"
    echo "  git commit --no-verify"
    exit 1
fi